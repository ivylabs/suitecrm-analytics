<data:sql-datasource xmlns:data="http://jfreereport.sourceforge.net/namespaces/datasources/sql">
  <data:config/>
  <data:jndi>
    <data:path>SuiteCRMAnalytics</data:path>
  </data:jndi>
  <data:query-definitions>
    <data:query name="Report">
      <data:static-query>SELECT 
	CONCAT(DU.USER_FIRST_NAME , &apos; &apos; , DU.USER_LAST_NAME) EMPLOYEE_FULL_NAME
	,SUM(IF(DL.LEAD_STATUS = &apos;New&apos;, 1, 0)) AS NEW_LEAD_COUNT
	,SUM(IF(DL.LEAD_STATUS = &apos;Assigned&apos;, 1, 0)) AS ASSIGNED_LEAD_COUNT
	,SUM(IF(DL.LEAD_STATUS = &apos;Converted&apos;, 1, 0)) AS CONVERTED_LEAD_COUNT
	,SUM(IF(DL.LEAD_STATUS = &apos;Recycled&apos;, 1, 0)) AS RECYCLED_LEAD_COUNT
	,SUM(IF(DL.LEAD_STATUS = &apos;Dead&apos;, 1, 0)) AS DEAD_LEAD_COUNT
	,SUM(IF(DL.LEAD_STATUS = &apos;In Process&apos;, 1, 0)) AS IN_PROCESS_LEAD_COUNT
	,COUNT(FLM.LEAD_TK) TOTAL_LEADS
FROM F_LEAD_MANAGEMENT AS FLM
INNER JOIN D_USERS AS DU 
	ON FLM.ASSIGNED_USER_TK = DU.USER_TK
INNER JOIN D_LEADS AS DL 
	ON FLM.LEAD_TK = DL.LEAD_TK
INNER JOIN D_CAMPAIGNS AS DC 
	ON FLM.CAMPAIGN_TK = DC.CAMPAIGN_TK
INNER JOIN D_DATE DD
	ON FLM.LEAD_CREATED_TK = DD.DATE_TK
WHERE (DC.CAMPAIGN_TYPE IN (${pCampaignTypeFilter}) OR &apos;All Campaign Types&apos; IN (${pCampaignTypeFilter}))
AND (DC.CAMPAIGN_STATUS IN (${pCampaignStatusFilter}) OR &apos;All Campaign Status&apos; IN (${pCampaignStatusFilter}))
AND (DC.CAMPAIGN_NAME IN (${pCampaignFilter}) OR &apos;All Campaigns&apos; IN (${pCampaignFilter}))
AND (FLM.LEAD_DELETED = ${pShowDeletedRecords} OR 1 = ${pShowDeletedRecords})
GROUP BY DU.USER_TK</data:static-query>
      <data:script language="ECMAScript">// This is a template to demonstrate the existing functions
// you can use in a global data-source script. All functions and
// global variables you define here will be available for the
// all query scripts.
//
// Feel free to delete any function you don&apos;t use.
//
// you can process scripts via
//   scriptHelper.eval(&quot;println (&apos;Hello World&apos;);&quot;, &quot;ECMAscript&quot;);
//
// or your can load your own ECMA/JavaScript files and execute them via
//   scriptHelper.evalFile (&quot;/your/file/here.js&quot;, &quot;ECMAscript&quot;);
//
// both inline scripts and files will be executed in the global context -
// any function or variable defined there will be available globally.
//
// The following global variables exist by default:
//    resourceManager : The ResourceManager can be used to load files
//    contextKey      : ResourceKey the context key points to the prpt-bundle
//    dataFactory     : The current datafactory instance
//    configuration   : The current report configuration
//    resourceBundleFactory : Access to translations and locale information
//    scriptHelper    : Allows to load and evaluate other scripts

function initQuery()
{
  // place all initialization logic here. This is the right space to prepare complex lookup tables or
  // to fill global variables.

  // this method is called once during initialization. This function will
  // only be called when the associated query is used.
}

function shutdownQuery()
{
  // place all shutdown logic here. If you use any persistent resources like files or connections
  // make sure you close them here.

  // this method is called once during the data-source shut-down. It
  // will only be called if the associated query has been fired.
}

function computeQuery (query, queryName, dataRow)
{
  // computes the query string that is used to query the data-source.
  // query contains the statically defined query (MQL-text)
  // queryName is the logical name for this query given at design-time
  // dataRow contains all parameters that will be used to execute the query

  //var orderBy = dataRow.get(&quot;ReportOrderParameter&quot;);
  //var order = dataRow.get(&quot;ReportOrderAscDescParameter&quot;);

  //var newQuery = query+&quot; ORDER BY &quot;+orderBy+&quot; &quot;+order;

  //return newQuery;
  Packages.java.lang.System.out.println(&quot;---------------------------------------&quot;);

	var PARAM_ORDER = dataRow.get(&quot;pOrderColumnFilter&quot;);

	

	query = query.replace(&quot;${PARAM_ORDER}&quot;, PARAM_ORDER);

  return query;
}

function computeQueryFields (query, queryName)
{
  // return any additional fields that may affect caching. If you rewrite
  // the query dynamically in the &apos;computeQuery&apos; function, include all fields
  // that may take part of the query or query computation.
  //
  // if you do not want any caching, return &lt;null&gt;.
  return null;
}

function postProcessResult(query, queryName, dataRow, tableModel)
{
  // optionally post-process the query result. Usually you would not
  // manipulate the given table-model directly, but you can either copy
  // data into a new model or you can wrap it with a custom table-model
  // implementation of your own making.

  // if you discard the original tablemodel in the process, make sure
  // you close it properly or you may leak resources.
  return tableModel;
}
</data:script>
    </data:query>
    <data:query name="DateFilter">
      <data:static-query>SELECT &apos;9999-99&apos; AS &apos;YYYY-DD&apos;, &apos;All Periods&apos; as DATE_FILTER
UNION
SELECT
	DD.`YYYY-MM`
	,CONCAT(DD.YEAR4,&apos; - &apos;, DD.MONTH_LONG_DESC) AS DATE_FILTER
FROM F_CASE_MANAGEMENT FCM
INNER JOIN D_DATE DD
	ON FCM.CASE_CREATED_TK = DD.DATE_TK
GROUP BY 1,2
ORDER BY 1 DESC;</data:static-query>
    </data:query>
  </data:query-definitions>
</data:sql-datasource>
